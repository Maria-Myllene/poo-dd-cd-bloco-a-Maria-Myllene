{
    "patches": [
        {
            "label": "2025-09-16_19-39-25",
            "content": "@@ -1,190 +1,95 @@\n-class Towel:%0A    def __init__(self):%0A        self.color = %22red%22%0A        self.size = %22p%22%0A        self.wetness = 0%0A%0Atowel = Towel()%0Aprint (towel.color)%0Aprint (towel.size)%0Aprint (towel.wetness)\n+@@ -4,10 +4,56 @@%0A nt(%2522%0A-lala%0A+Minha toalha %25C3%25A9 verde, mas pode ser branca ou rosa.%0A %2522)%0A\n",
            "lines": "5"
        },
        {
            "label": "2025-09-16_20-09-44",
            "content": "@@ -147,50 +147,8 @@\n or)%0A\n-towel.color = %22white%22%0Aprint (towel.color)%0A\n prin\n",
            "lines": "10"
        },
        {
            "label": "2025-09-16_20-10-52",
            "content": "@@ -31,31 +31,8 @@\n self\n-, color: str, size: str\n ):%0A \n@@ -51,21 +51,21 @@\n color = \n-color\n+%22red%22\n %0A       \n@@ -77,20 +77,19 @@\n .size = \n-size\n+%22p%22\n %0A       \n@@ -125,22 +125,9 @@\n wel(\n-%22green%22, %22G%22)%0A\n+)\n %0Apri\n",
            "lines": "12"
        },
        {
            "label": "2025-09-16_20-14-27",
            "content": "@@ -162,35 +162,8 @@\n %22G%22)\n-%0Atoalha = Towel(%22red%22, %22P%22)\n %0A%0Apr\n",
            "lines": "13"
        },
        {
            "label": "2025-09-16_20-16-45",
            "content": "@@ -162,167 +162,35 @@\n %22G%22)\n- # a vari%C3%A1vel towel referencia Towel, que %C3%A9 um objeto%0Atoalha = Towel(%22red%22, %22P%22)%0Aoutra = toalha%0Amais_outra = toalha%0A%0Atoalha.color = %22blue%22%0Aoutra.color = %22blue%22\n+%0Atoalha = Towel(%22red%22, %22P%22)\n %0A%0Apr\n",
            "lines": "14"
        },
        {
            "label": "2025-09-16_20-19-11",
            "content": "@@ -133,106 +133,8 @@\n  = 0\n-%0A    def __str__ (self):%0A        return f%22color:%7Bself.color%7D, tam:%7Bself.size%7D, umi:%7Bself.wetness%7D%22\n %0A%0Ato\n@@ -165,9 +165,9 @@\n ) # \n-A\n+a\n  var\n@@ -239,16 +239,94 @@\n %22, %22P%22)%0A\n+outra = toalha%0Amais_outra = toalha%0A%0Atoalha.color = %22blue%22%0Aoutra.color = %22blue%22\n %0A%0Aprint \n",
            "lines": "19"
        },
        {
            "label": "2025-09-16_20-21-30",
            "content": "@@ -338,16 +338,17 @@\n , %22P%22)%0A%0A\n+%0A\n print (t\n@@ -445,18 +445,4 @@\n ess)\n-%0A%0Aprint(towel)\n",
            "lines": "17"
        },
        {
            "label": "2025-09-16_20-23-48",
            "content": "@@ -177,17 +177,16 @@\n f%22color:\n- \n %7Bself.co\n@@ -195,17 +195,16 @@\n r%7D, tam:\n- \n %7Bself.si\n@@ -212,17 +212,16 @@\n e%7D, umi:\n- \n %7Bself.we\n",
            "lines": "18"
        },
        {
            "label": "2025-09-23_16-26-54",
            "content": "@@ -5,17 +5,16 @@\n s Towel:\n- \n %0A    def\n@@ -18,12 +18,16 @@\n def \n+__\n init\n+__\n (sel\n@@ -56,20 +56,8 @@\n tr):\n- #construtor\n %0A   \n@@ -79,18 +79,16 @@\n  = color\n-  \n %0A       \n@@ -130,25 +130,24 @@\n ess = 0%0A\n-%0A\n     def \n getMaxWe\n@@ -142,453 +142,23 @@\n def \n-getMaxWetness (self) -%3E int:%0A        if self.size == %22P%22:%0A            return 10%0A        if self.size == %22M%22:%0A            return 20%0A        if self.size == %22G%22:%0A            return 30%0A        return 0%0A%0A    def dry (self, amount: int) -%3E None:%0A        self.wetness += amount%0A        if self.wetness %3E= self.getMaxWetness():%0A            print(%22toalha encharcada%22)%0A            self.wetness = self.getMaxWetness()%0A        %0A    def str(self): #toString\n+__str__ (self):\n %0A   \n@@ -175,9 +175,11 @@\n n f%22\n-C\n+col\n or: \n@@ -196,15 +196,11 @@\n r%7D, \n-T\n+t\n am\n-anho\n : %7Bs\n@@ -214,15 +214,11 @@\n e%7D, \n-U\n+u\n mi\n-dade\n : %7Bs\n@@ -235,174 +235,22 @@\n s%7D%22%0A\n-    %0A    def isDry (self) -%3E bool :%0A        return self.wetness == 0%0A    %0A    def wringOut (self) -%3E None :%0A        self.wetness = 0%0A%0Adef main (): %0A    toalha\n+%0Atowel\n  = Towel\n  (%22%22\n@@ -249,783 +249,216 @@\n owel\n- \n (%22\n+green\n %22, %22\n+G\n %22) \n-%0A    while True:%0A        line: str = input() #5. entrada de linha%0A        args: list%5Bstr%5D = line.split(%22 %22) #6. lista de palavras %0A        print(%22$%22 + line)%0A        if args%5B0%5D == %22end%22:%0A            break%0A        elif args%5B0%5D == %22criar%22:%0A            color = args%5B1%5D%0A            size = args%5B2%5D%0A            toalha = Towel(color, size)%0A        elif args%5B0%5D == %22mostrar%22:%0A            \n+# A vari%C3%A1vel towel referencia Towel, que %C3%A9 um objeto%0Atoalha = Towel(%22red%22, %22P%22)%0A%0A\n print\n+ \n (to\n-alha)%0A        elif args%5B0%5D == %22enxugar%22:%0A            amount: int = int(args%5B1%5D)%0A            toalha.dry(amount)%0A        elif args%5B0%5D == %22seca%22:%0A            if toalha.isDry():%0A                print (%22sim%22)%0A            else:%0A                print(%22nao%22)%0A        elif args%5B0%5D == %22torcer%22:%0A            toalha.wringOut()%0A        else:%0A            print (%22fail: comando inv%C3%A1lido%22)%0A%0Amain() \n+wel.color)%0Atowel.color = %22white%22%0Aprint (towel.color)%0Aprint (towel.size)%0Aprint (towel.wetness)%0A%0Aprint(towel)\n",
            "lines": "18"
        },
        {
            "label": "2025-09-23_16-43-18",
            "content": "@@ -712,16 +712,17 @@\n  -%3E bool\n+ \n :%0A      \n@@ -776,32 +776,33 @@\n t (self) -%3E None\n+ \n :%0A        self.w\n@@ -852,14 +852,12 @@\n l (%22\n- \n %22, %22\n- \n %22) %0A\n@@ -1621,12 +1621,11 @@\n %22)%0A%0Amain\n- \n () \n",
            "lines": "58"
        },
        {
            "label": "2025-09-23_16-44-45",
            "content": "@@ -850,12 +850,14 @@\n l (%22\n+ \n %22, %22\n+ \n %22) %0A\n@@ -1617,20 +1617,16 @@\n lido%22)%0A%0A\n-    \n main () \n",
            "lines": "58"
        },
        {
            "label": "2025-09-23_16-46-09",
            "content": "@@ -19,17 +19,12 @@\n def \n-__\n init\n-__ \n (sel\n@@ -579,16 +579,11 @@\n def \n-__\n str\n-__ \n (sel\n@@ -839,15 +839,8 @@\n alha\n-: Towel\n  = T\n@@ -1615,15 +1615,20 @@\n lido%22)%0A%0A\n+    \n main\n+ \n () \n",
            "lines": "58"
        },
        {
            "label": "2025-09-28_16-38-54",
            "content": "class Towel: \n    def __init__ (self, color: str, size: str): #construtor\n        self.color = color  \n        self.size = size\n        self.wetness = 0\n\n    def getMaxWetness (self) -> int:\n        if self.size == \"P\":\n            return 10\n        if self.size == \"M\":\n            return 20\n        if self.size == \"G\":\n            return 30\n        return 0\n\n    def dry (self, amount: int) -> None:\n        self.wetness += amount\n        if self.wetness >= self.getMaxWetness():\n            print(\"toalha encharcada\")\n            self.wetness = self.getMaxWetness()\n        \n    def __str__ (self): #toString\n        return f\"Cor: {self.color}, Tamanho: {self.size}, Umidade: {self.wetness}\"\n    \n    def isDry (self) -> bool:\n        return self.wetness == 0\n    \n    def wringOut (self) -> None:\n        self.wetness = 0\n\ndef main (): \n    toalha: Towel = Towel (\"\", \"\") \n    while True:\n        line: str = input() #5. entrada de linha\n        args: list[str] = line.split(\" \") #6. lista de palavras \n        print(\"$\" + line)\n        if args[0] == \"end\":\n            break\n        elif args[0] == \"criar\":\n            color = args[1]\n            size = args[2]\n            toalha = Towel(color, size)\n        elif args[0] == \"mostrar\":\n            print(toalha)\n        elif args[0] == \"enxugar\":\n            amount: int = int(args[1])\n            toalha.dry(amount)\n        elif args[0] == \"seca\":\n            if toalha.isDry():\n                print (\"sim\")\n            else:\n                print(\"nao\")\n        elif args[0] == \"torcer\":\n            toalha.wringOut()\n        else:\n            print (\"fail: comando inv\u00e1lido\")\n\nmain() ",
            "lines": "58"
        }
    ]
}